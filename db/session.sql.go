// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const addSessionAllowedCharacter = `-- name: AddSessionAllowedCharacter :exec
INSERT INTO "session_allowed_characters" (session_id, character_id)
SELECT $1, unnest($2::bigint[])
ON CONFLICT DO NOTHING
`

type AddSessionAllowedCharacterParams struct {
	SessionID int64   `json:"sessionId"`
	Column2   []int64 `json:"column2"`
}

func (q *Queries) AddSessionAllowedCharacter(ctx context.Context, arg AddSessionAllowedCharacterParams) error {
	_, err := q.db.ExecContext(ctx, addSessionAllowedCharacter, arg.SessionID, pq.Array(arg.Column2))
	return err
}

const createSession = `-- name: CreateSession :one
INSERT INTO "sessions" (name, campaign_id, map_id)
VALUES ($1, $2, $3)
RETURNING id, name, campaign_id, map_id
`

type CreateSessionParams struct {
	Name       string `json:"name"`
	CampaignID int64  `json:"campaignId"`
	MapID      int64  `json:"mapId"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.Name, arg.CampaignID, arg.MapID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CampaignID,
		&i.MapID,
	)
	return i, err
}

const getSessionsByCampaignAndCharacter = `-- name: GetSessionsByCampaignAndCharacter :many
SELECT
    s.id, s.name,
    CASE
        WHEN sac.character_id IS NOT NULL THEN TRUE
        ELSE FALSE
        END AS is_allowed
FROM "sessions" s
         LEFT JOIN "session_allowed_characters" sac
                   ON s.id = sac.session_id AND sac.character_id = $2
WHERE s.campaign_id = $1
`

type GetSessionsByCampaignAndCharacterParams struct {
	CampaignID  int64 `json:"campaignId"`
	CharacterID int64 `json:"characterId"`
}

type GetSessionsByCampaignAndCharacterRow struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	IsAllowed bool   `json:"isAllowed"`
}

func (q *Queries) GetSessionsByCampaignAndCharacter(ctx context.Context, arg GetSessionsByCampaignAndCharacterParams) ([]GetSessionsByCampaignAndCharacterRow, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsByCampaignAndCharacter, arg.CampaignID, arg.CharacterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSessionsByCampaignAndCharacterRow
	for rows.Next() {
		var i GetSessionsByCampaignAndCharacterRow
		if err := rows.Scan(&i.ID, &i.Name, &i.IsAllowed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
